#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl { release-after-ms = <250>; };

&mt {
    quick-tap-ms = <200>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    #include "combos.dtsi"

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "ColeMak-DH";
            bindings = <
  &kp Q        &kp W       &kp F        &kp P        &kp B           &kp J        &kp L              &kp U           &kp Y       &kp SEMICOLON
  &mt LCTRL A  &mt LALT R  &mt LGUI S   &mt LSHFT T  &kp G           &kp M        &mt RSHFT N        &mt LEFT_GUI E  &mt RALT I  &mt RCTRL O
  &kp Z        &kp X       &kp C        &kp D        &kp V           &kp K        &kp H              &kp COMMA       &kp DOT     &kp SLASH
                           &lt MED ESC  &lt 1 SPACE  &lt NUFU TAB    &lt 3 ENTER  &lt SYM BACKSPACE
            >;
        };

        Nav {
            label = "Navigation";
            bindings = <
  &kp GRAVE             &kp LEFT_BRACKET  &kp RIGHT_BRACKET      &trans  &trans    &kp K_REDO    &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO
  &kp SQT               &kp LPAR          &kp RIGHT_PARENTHESIS  &trans  &trans    &kp CAPSLOCK  &kp LEFT     &kp DOWN       &kp UP       &kp RIGHT
  &kp NON_US_BACKSLASH  &kp LEFT_BRACE    &kp RIGHT_BRACE        &trans  &trans    &kp INS       &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                                          &trans                 &trans  &trans    &trans        &trans
            >;
        };

        NUM {
            label = "Number";
            bindings = <
  &kp LEFT_BRACKET  &kp N7        &kp N8        &kp NUMBER_9  &kp RIGHT_BRACKET       &none   &none   &none   &none   &none
  &kp SQT           &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL               &none   &trans  &trans  &trans  &trans
  &kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NON_US_BACKSLASH    &none   &none   &none   &none   &none
                                  &kp PERIOD    &kp NUMBER_0  &kp MINUS               &trans  &trans
            >;
        };

        SYM {
            label = "symbols";
            bindings = <
  &kp LEFT_BRACE     &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &none   &none   &none   &none   &none
  &kp DOUBLE_QUOTES  &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &none   &trans  &trans  &trans  &trans
  &kp TILDE          &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE           &none   &none   &none   &none   &none
                                      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &trans  &trans
            >;
        };

        Media {
            label = "Media";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &bt BT_PRV  &bt BT_NXT        &bt BT_CLR_ALL  &trans        &bootloader
  &kp C_PREV    &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP      &kp C_NEXT      &kp C_PREV  &kp C_VOL_DN      &kp C_MUTE      &kp C_VOL_UP  &kp C_NEXT
  &trans        &trans        &trans        &trans            &trans          &trans      &trans            &trans          &trans        &trans
                              &trans        &kp C_PLAY_PAUSE  &kp C_STOP      &kp C_STOP  &kp C_PLAY_PAUSE
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
  &trans    &trans    &trans     &trans     &trans       &trans     &trans     &trans     &trans    &trans
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans       &trans     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &trans    &mo SCR   &mo SNI    &trans     &trans       &trans     &trans     &tog SNI   &tog SCR  &trans
                      &mkp RCLK  &mkp LCLK  &mkp MCLK    &mkp MCLK  &mkp LCLK
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
